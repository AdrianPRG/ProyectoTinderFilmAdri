//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Teclado.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Teclado: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Teclado()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Teclado"",
    ""maps"": [
        {
            ""name"": ""TeclaD"",
            ""id"": ""def84fad-4f39-4c55-ad5e-a19f08738ea6"",
            ""actions"": [
                {
                    ""name"": ""OnTeclaD"",
                    ""type"": ""Button"",
                    ""id"": ""357d97a8-3bf2-44ab-bf9f-d4e996ec4ec5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4ed60d7c-150a-480b-956d-61a3502b31ca"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnTeclaD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TeclaA"",
            ""id"": ""347660c4-1abc-431f-b928-13385aa4a8f1"",
            ""actions"": [
                {
                    ""name"": ""onTeclaA"",
                    ""type"": ""Button"",
                    ""id"": ""e6b31a76-5702-42be-89bd-4214d7c1e8f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d32d880-209a-4c19-b795-355afb4ab5f5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""onTeclaA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TeclaD
        m_TeclaD = asset.FindActionMap("TeclaD", throwIfNotFound: true);
        m_TeclaD_OnTeclaD = m_TeclaD.FindAction("OnTeclaD", throwIfNotFound: true);
        // TeclaA
        m_TeclaA = asset.FindActionMap("TeclaA", throwIfNotFound: true);
        m_TeclaA_onTeclaA = m_TeclaA.FindAction("onTeclaA", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TeclaD
    private readonly InputActionMap m_TeclaD;
    private List<ITeclaDActions> m_TeclaDActionsCallbackInterfaces = new List<ITeclaDActions>();
    private readonly InputAction m_TeclaD_OnTeclaD;
    public struct TeclaDActions
    {
        private @Teclado m_Wrapper;
        public TeclaDActions(@Teclado wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnTeclaD => m_Wrapper.m_TeclaD_OnTeclaD;
        public InputActionMap Get() { return m_Wrapper.m_TeclaD; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TeclaDActions set) { return set.Get(); }
        public void AddCallbacks(ITeclaDActions instance)
        {
            if (instance == null || m_Wrapper.m_TeclaDActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TeclaDActionsCallbackInterfaces.Add(instance);
            @OnTeclaD.started += instance.OnOnTeclaD;
            @OnTeclaD.performed += instance.OnOnTeclaD;
            @OnTeclaD.canceled += instance.OnOnTeclaD;
        }

        private void UnregisterCallbacks(ITeclaDActions instance)
        {
            @OnTeclaD.started -= instance.OnOnTeclaD;
            @OnTeclaD.performed -= instance.OnOnTeclaD;
            @OnTeclaD.canceled -= instance.OnOnTeclaD;
        }

        public void RemoveCallbacks(ITeclaDActions instance)
        {
            if (m_Wrapper.m_TeclaDActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITeclaDActions instance)
        {
            foreach (var item in m_Wrapper.m_TeclaDActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TeclaDActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TeclaDActions @TeclaD => new TeclaDActions(this);

    // TeclaA
    private readonly InputActionMap m_TeclaA;
    private List<ITeclaAActions> m_TeclaAActionsCallbackInterfaces = new List<ITeclaAActions>();
    private readonly InputAction m_TeclaA_onTeclaA;
    public struct TeclaAActions
    {
        private @Teclado m_Wrapper;
        public TeclaAActions(@Teclado wrapper) { m_Wrapper = wrapper; }
        public InputAction @onTeclaA => m_Wrapper.m_TeclaA_onTeclaA;
        public InputActionMap Get() { return m_Wrapper.m_TeclaA; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TeclaAActions set) { return set.Get(); }
        public void AddCallbacks(ITeclaAActions instance)
        {
            if (instance == null || m_Wrapper.m_TeclaAActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TeclaAActionsCallbackInterfaces.Add(instance);
            @onTeclaA.started += instance.OnOnTeclaA;
            @onTeclaA.performed += instance.OnOnTeclaA;
            @onTeclaA.canceled += instance.OnOnTeclaA;
        }

        private void UnregisterCallbacks(ITeclaAActions instance)
        {
            @onTeclaA.started -= instance.OnOnTeclaA;
            @onTeclaA.performed -= instance.OnOnTeclaA;
            @onTeclaA.canceled -= instance.OnOnTeclaA;
        }

        public void RemoveCallbacks(ITeclaAActions instance)
        {
            if (m_Wrapper.m_TeclaAActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITeclaAActions instance)
        {
            foreach (var item in m_Wrapper.m_TeclaAActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TeclaAActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TeclaAActions @TeclaA => new TeclaAActions(this);
    public interface ITeclaDActions
    {
        void OnOnTeclaD(InputAction.CallbackContext context);
    }
    public interface ITeclaAActions
    {
        void OnOnTeclaA(InputAction.CallbackContext context);
    }
}
